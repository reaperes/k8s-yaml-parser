---
# worn-elk-ui-test-6qmnf
apiVersion: v1
kind: Pod
metadata:
  name: "worn-elk-ui-test-6qmnf"
  annotations:
    "helm.sh/hook": test-success
spec:
  initContainers:
    - name: test-framework
      image: dduportal/bats:0.4.0
      command:
      - "bash"
      - "-c"
      - |
        set -ex
        # copy bats to tools dir
        cp -R /usr/local/libexec/ /tools/bats/
      volumeMounts:
      - mountPath: /tools
        name: tools
  containers:
    - name: worn-elk-ui-test
      image: lachlanevenson/k8s-kubectl:v1.4.8-bash
      command: ["/tools/bats/bats", "-t", "/tests/run.sh"]
      volumeMounts:
      - mountPath: /tests
        name: tests
        readOnly: true
      - mountPath: /tools
        name: tools
  volumes:
  - name: tests
    configMap:
      name: worn-elk-consul-tests
  - name: tools
    emptyDir: {}
  restartPolicy: Never
MANIFEST:

---
# Source: consul/templates/pod-dist-budget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: "worn-elk-consul-pdb"
  labels:
    heritage: "Tiller"
    release: "worn-elk"
    chart: consul-3.6.2
    component: "worn-elk-consul"
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      component: "worn-elk-consul"
---
# Source: consul/templates/gossip-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: worn-elk-consul-gossip-key
  labels:
    heritage: "Tiller"
    release: "worn-elk"
    chart: consul-3.6.2
    component: "worn-elk-consul"
type: Opaque
data:

  gossip-key: QmdEcVlPWlBPeUY0MDloZjc1THpwb1RZ
---
# Source: consul/templates/test-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: worn-elk-consul-tests
data:
  run.sh: |-
    @test "Testing Consul cluster has quorum" {
      for i in {0..2}; do
        for n in {1..30}; do
          if [ `kubectl exec worn-elk-consul-$i consul members --namespace=default | grep server | wc -l` -ge "3" ]; then
            echo "worn-elk-consul-$i OK. consul members returning at least 3 records."
            break
          else
            echo "worn-elk-consul-$i ERROR. consul members returning less than 3 records."
          fi

          if [ "$n" -ge "30" ]; then
            echo "Failed $n times to get members from worn-elk-consul-$i"
            exit 1
          fi
          sleep 10
        done
      done
    }
---
# Source: consul/templates/consul-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "worn-elk-consul"
  labels:
    heritage: "Tiller"
    release: "worn-elk"
    chart: consul-3.6.2
    component: "worn-elk-consul"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  ports:
  - name: http
    port: 8500
  - name: rpc
    port: 8400
  - name: serflan-tcp
    protocol: "TCP"
    port: 8301
  - name: serflan-udp
    protocol: "UDP"
    port: 8301
  - name: serfwan-tcp
    protocol: "TCP"
    port: 8302
  - name: serfwan-udp
    protocol: "UDP"
    port: 8302
  - name: server
    port: 8300
  - name: consuldns-tcp
    port: 8600
  - name: consuldns-udp
    protocol: "UDP"
    port: 8600
  clusterIP: None
  selector:
    component: "worn-elk-consul"
---
# Source: consul/templates/ui-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "worn-elk-consul-ui"
  labels:
    heritage: "Tiller"
    release: "worn-elk"
    chart: consul-3.6.2
    component: "worn-elk-consul"
spec:
  ports:
  - name: http
    port: 8500
  selector:
    component: "worn-elk-consul"
  type: "NodePort"
---
# Source: consul/templates/consul-statefulset.yaml
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "worn-elk-consul"
  labels:
    heritage: "Tiller"
    release: "worn-elk"
    chart: consul-3.6.2
    component: "worn-elk-consul"
spec:
  serviceName: "worn-elk-consul"
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: "worn-elk"
      component: "worn-elk-consul"
  template:
    metadata:
      name: "worn-elk-consul"
      labels:
        heritage: "Tiller"
        release: "worn-elk"
        chart: consul-3.6.2
        component: "worn-elk-consul"
    spec:
      securityContext:
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - "worn-elk-consul"

      containers:
      - name: "worn-elk-consul"
        image: "consul:1.0.0"
        imagePullPolicy: "Always"
        ports:
        - name: http
          containerPort: 8500
        - name: rpc
          containerPort: 8400
        - name: serflan-tcp
          protocol: "TCP"
          containerPort: 8301
        - name: serflan-udp
          protocol: "UDP"
          containerPort: 8301
        - name: serfwan-tcp
          protocol: "TCP"
          containerPort: 8302
        - name: serfwan-udp
          protocol: "UDP"
          containerPort: 8302
        - name: server
          containerPort: 8300
        - name: consuldns-tcp
          containerPort: 8600
        - name: consuldns-udp
          protocol: "UDP"
          containerPort: 8600
        resources:
          {}

        env:
        - name: INITIAL_CLUSTER_SIZE
          value: "3"
        - name: STATEFULSET_NAME
          value: "worn-elk-consul"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: STATEFULSET_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: DNSPORT
          value: "8600"
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/consul
        - name: gossip-key
          mountPath: /etc/consul/secrets
          readOnly: true

        livenessProbe:
          exec:
            command:
            - consul
            - members
            - -http-addr=http://127.0.0.1:8500
          initialDelaySeconds: 300
          timeoutSeconds: 5
        command:
          - "/bin/sh"
          - "-ec"
          - |
            IP=$(hostname -i)
            if [ -e /etc/consul/secrets/gossip-key ]; then
              echo "{\"encrypt\": \"$(base64 /etc/consul/secrets/gossip-key)\"}" > /etc/consul/encrypt.json
              GOSSIP_KEY="-config-file /etc/consul/encrypt.json"
            fi

            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                while true; do
                    echo "Waiting for ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME} to come up"
                    ping -W 1 -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc > /dev/null && break
                    sleep 1s
                done
            done

            PEERS=""
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
              NEXT_PEER="$(ping -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc | awk -F'[()]' '/PING/{print $2}')"
              if [ "${NEXT_PEER}" != "${POD_IP}" ]; then
                PEERS="${PEERS}${PEERS:+ } -retry-join ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc"
              fi
            done

            exec /bin/consul agent \
              -ui \
              -domain=consul \
              -data-dir=/var/lib/consul \
              -server \
              -bootstrap-expect=${INITIAL_CLUSTER_SIZE} \
              -disable-keyring-file \
              -bind=0.0.0.0 \
              -advertise=${IP} \
              ${PEERS} \
              ${GOSSIP_KEY} \
              -client=0.0.0.0 \
              -dns-port=${DNSPORT} \
              -http-port=8500
      volumes:
      - name: gossip-key
        secret:
          secretName: worn-elk-consul-gossip-key

  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          # upstream recommended max is 700M
          storage: "1Gi"
